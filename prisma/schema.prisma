// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator custom_generator {
  provider = "nestjs-prisma-graphql-crud-gen"
  output   = "../src/generated"
}

model place {
  id                Int                 @id @default(autoincrement())
  name              String
  lat               Float
  lng               Float
  kakaoPlaceId      String
  reviewCnt         Int
  pointAvg          Float
  likeCnt           Int
  stamp             stamp[]
  review            review[]
  reviewComment     reviewComment[]
  placeMood         placeMood[]
  reviewMood        reviewMood[]
  reviewCommentMood reviewCommentMood[]
}

model user {
  id                Int                 @id @default(autoincrement())
  name              String?
  socialType        String?
  password          String?
  email             String?
  stamp             stamp[]
  review            review[]
  reviewComment     reviewComment[]
  placeMood         placeMood[]
  reviewMood        reviewMood[]
  reviewCommentMood reviewCommentMood[]
}

model stamp {
  id        Int      @id @default(autoincrement())
  mealType  mealType
  place     place?   @relation(fields: [placeId], references: [id])
  placeId   Int?
  user      user?    @relation(fields: [userId], references: [id])
  userId    Int?
  //찍은시간
  createdAt DateTime @default(now())
}

enum mealType {
  breakfast
  lunch
  dinner
  night
}

model review {
  id                Int                 @id @default(autoincrement())
  title             String
  content           String?
  point             Float
  place             place?              @relation(fields: [placeId], references: [id])
  placeId           Int?
  user              user?               @relation(fields: [userId], references: [id])
  userId            Int?
  reviewComment     reviewComment[]
  reviewMood        reviewMood[]
  reviewCommentMood reviewCommentMood[]
}

model reviewComment {
  id                Int                 @id @default(autoincrement())
  content           String
  user              user?               @relation(fields: [userId], references: [id])
  userId            Int?
  review            review?             @relation(fields: [reviewId], references: [id])
  reviewId          Int?
  place             place?              @relation(fields: [placeId], references: [id])
  placeId           Int?
  reviewCommentMood reviewCommentMood[]
}

model placeMood {
  id      Int    @id @default(autoincrement())
  status  Int
  user    user?  @relation(fields: [userId], references: [id])
  userId  Int?
  place   place? @relation(fields: [placeId], references: [id])
  placeId Int?
}

model reviewMood {
  id       Int     @id @default(autoincrement())
  status   Int
  user     user?   @relation(fields: [userId], references: [id])
  userId   Int?
  place    place?  @relation(fields: [placeId], references: [id])
  placeId  Int?
  review   review? @relation(fields: [reviewId], references: [id])
  reviewId Int?
}

model reviewCommentMood {
  id              Int            @id @default(autoincrement())
  status          Int
  user            user?          @relation(fields: [userId], references: [id])
  userId          Int?
  place           place?         @relation(fields: [placeId], references: [id])
  placeId         Int?
  review          review?        @relation(fields: [reviewId], references: [id])
  reviewId        Int?
  reviewComment   reviewComment? @relation(fields: [reviewCommentId], references: [id])
  reviewCommentId Int?
}
